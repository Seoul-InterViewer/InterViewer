import { IMainCardProps as IQuestion } from "../components/mainCard/mainCard.type";

export const mockQuestions: Record<string, IQuestion[]> = {
  next: [
    {
      id: "next-1",
      title: "Next.js SSR의 개념과 사용 시점",
      description:
        "SSR(Server-Side Rendering)의 개념, CSR과의 차이점, 실제 프로젝트에서 SSR을 선택해야 하는 상황을 설명합니다.",
      author: "프론트엔드 개발자",
      category: "nextjs",
      difficulty: "중급",
      tags: ["SSR", "Next.js", "렌더링"],
      likes: 124,
      publishedAt: "2024-01-15",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
    {
      id: "next-2",
      title: "Next.js App Router와 Pages Router 심층 비교",
      description:
        "Next.js 13의 App Router와 기존 Pages Router의 기능 및 사용법을 비교하고, 마이그레이션 전략을 제시합니다.",
      author: "시니어 개발자",
      category: "nextjs",
      difficulty: "고급",
      tags: ["App Router", "Pages Router", "Next.js 13"],
      likes: 89,
      publishedAt: "2024-01-12",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
    {
      id: "next-3",
      title: "Next.js 데이터 페칭 전략: getStaticProps vs getServerSideProps",
      description:
        "Next.js에서 데이터를 효과적으로 가져오는 방법인 getStaticProps와 getServerSideProps의 차이점과 사용 사례를 분석합니다.",
      author: "웹 개발 전문가",
      category: "nextjs",
      difficulty: "중급",
      tags: ["getStaticProps", "getServerSideProps", "데이터 페칭"],
      likes: 156,
      publishedAt: "2024-01-10",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
    {
      id: "next-4",
      title: "Next.js 미들웨어 활용 가이드: 인증, 리다이렉션, 국제화",
      description:
        "Next.js 미들웨어를 사용하여 인증, 리다이렉션, 국제화 등의 기능을 구현하는 방법을 실전 예제와 함께 알아봅니다.",
      author: "풀스택 개발자",
      category: "nextjs",
      difficulty: "고급",
      tags: ["Middleware", "인증", "리다이렉션"],
      likes: 203,
      publishedAt: "2024-01-08",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
  ],
  react: [
    {
      id: "react-1",
      title: "React 상태 관리: Context API vs Redux",
      description:
        "React 애플리케이션에서 상태를 효율적으로 관리하기 위한 Context API와 Redux의 장단점을 비교 분석합니다.",
      author: "React 전문가",
      category: "react",
      difficulty: "중급",
      tags: ["상태관리", "Redux", "Context API"],
      likes: 178,
      publishedAt: "2024-01-14",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
    {
      id: "react-2",
      title: "React useEffect 훅 완벽 가이드: 의존성 배열 이해",
      description:
        "React useEffect 훅의 작동 방식과 의존성 배열의 중요성을 실제 코드를 통해 자세히 설명합니다.",
      author: "리액트 개발자",
      category: "react",
      difficulty: "초급",
      tags: ["useEffect", "Hooks", "의존성 배열"],
      likes: 245,
      publishedAt: "2024-01-13",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
    {
      id: "react-3",
      title: "React 18 새로운 기능 탐구: Concurrent Features, Suspense",
      description:
        "React 18에 도입된 Concurrent Features와 Suspense를 활용하여 사용자 경험을 개선하는 방법을 알아봅니다.",
      author: "프론트엔드 아키텍트",
      category: "react",
      difficulty: "고급",
      tags: ["React 18", "Concurrent", "Suspense"],
      likes: 134,
      publishedAt: "2024-01-11",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
    {
      id: "react-4",
      title: "React Custom Hook 설계 패턴과 재사용성",
      description:
        "React Custom Hook을 효과적으로 설계하고 재사용성을 높이는 방법과 실제 프로젝트 적용 사례를 소개합니다.",
      author: "시니어 리액트 개발자",
      category: "react",
      difficulty: "고급",
      tags: ["Custom Hook", "설계 패턴", "재사용성"],
      likes: 167,
      publishedAt: "2024-01-09",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
  ],
  javascript: [
    {
      id: "js-1",
      title: "JavaScript 클로저(Closure) 완벽 이해 및 활용",
      description:
        "JavaScript 클로저의 개념을 명확히 이해하고 실제 코딩에서 어떻게 활용할 수 있는지 예제와 함께 설명합니다.",
      author: "JavaScript 전문가",
      category: "javascript",
      difficulty: "중급",
      tags: ["클로저", "스코프", "함수형 프로그래밍"],
      likes: 289,
      publishedAt: "2024-01-16",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
    {
      id: "js-2",
      title: "JavaScript Promise와 async/await 비동기 처리",
      description:
        "JavaScript 비동기 처리를 위한 Promise와 async/await의 사용법, 장단점, 그리고 실전 활용 팁을 제공합니다.",
      author: "웹 개발자",
      category: "javascript",
      difficulty: "초급",
      tags: ["Promise", "async/await", "비동기"],
      likes: 312,
      publishedAt: "2024-01-15",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
    {
      id: "js-3",
      title: "JavaScript 이벤트 루프 동작 원리 파헤치기",
      description:
        "JavaScript 엔진의 핵심인 이벤트 루프의 작동 방식과 콜 스택, 태스크 큐의 관계를 시각적으로 설명합니다.",
      author: "백엔드 개발자",
      category: "javascript",
      difficulty: "고급",
      tags: ["이벤트 루프", "콜 스택", "태스크 큐"],
      likes: 198,
      publishedAt: "2024-01-14",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
    {
      id: "js-4",
      title: "JavaScript ES6+ 핵심 문법과 실전 활용",
      description:
        "ES6부터 최신 JavaScript까지 주요 문법을 정리하고 실제 프로젝트에서 활용할 수 있는 예제를 제공합니다.",
      author: "프론트엔드 개발자",
      category: "javascript",
      difficulty: "초급",
      tags: ["ES6+", "모던 JavaScript", "문법"],
      likes: 267,
      publishedAt: "2024-01-13",
      imageUrl: "/placeholder.svg?height=200&width=300",
    },
  ],
};

export const featuredQuestions: IQuestion[] = [
  {
    id: "featured-1",
    title: "프론트엔드 개발자 면접: 2024년 최신 트렌드",
    description:
      "2024년 프론트엔드 개발자 면접에서 중요하게 다뤄지는 기술 스택, 질문 유형, 그리고 면접 준비 전략을 제시합니다.",
    author: "테크 리드",
    category: "typescript",
    difficulty: "중급",
    tags: ["면접", "트렌드", "2024"],
    likes: 456,
    publishedAt: "2024-01-17",
    imageUrl: "/placeholder.svg?height=300&width=400",
  },
  {
    id: "featured-2",
    title: "TypeScript 고급 타입 시스템 완벽 마스터",
    description:
      "TypeScript의 Generic, Conditional Types, Mapped Types를 깊이 이해하고 실제 프로젝트에서 활용하는 방법을 배웁니다.",
    author: "TypeScript 전문가",
    category: "typescript",
    difficulty: "고급",
    tags: ["TypeScript", "고급 타입", "Generic"],
    likes: 378,
    publishedAt: "2024-01-16",
    imageUrl: "/placeholder.svg?height=300&width=400",
  },
  {
    id: "featured-3",
    title: "JavaScript 웹 성능 최적화 실전 가이드",
    description:
      "Core Web Vitals 개선, 번들 크기 최적화 등 실제 웹 프로젝트에 적용 가능한 JavaScript 성능 최적화 전략을 소개합니다.",
    author: "성능 최적화 전문가",
    category: "javascript",
    difficulty: "고급",
    tags: ["성능", "최적화", "Core Web Vitals"],
    likes: 523,
    publishedAt: "2024-01-15",
    imageUrl: "/placeholder.svg?height=300&width=400",
  },
  {
    id: "featured-4",
    title: "React 상태 관리 도구 비교: Context API, Redux, Recoil",
    description:
      "React 상태 관리를 위한 Context API, Redux, Recoil의 특징, 장단점, 그리고 프로젝트 상황별 선택 기준을 분석합니다.",
    author: "React 마스터",
    category: "react",
    difficulty: "중급",
    tags: ["상태관리", "Redux", "Recoil", "Context API"],
    likes: 412,
    publishedAt: "2024-01-14",
    imageUrl: "/placeholder.svg?height=300&width=400",
  },
  {
    id: "featured-5",
    title: "Next.js 이미지 최적화 전략 A to Z",
    description:
      "Next.js에서 next/image 컴포넌트를 사용하여 이미지 로딩 성능을 최적화하는 방법과 다양한 고급 기법을 소개합니다.",
    author: "프론트엔드 엔지니어",
    category: "nextjs",
    difficulty: "초급",
    tags: ["Next.js", "이미지 최적화", "next/image"],
    likes: 301,
    publishedAt: "2024-01-13",
    imageUrl: "/placeholder.svg?height=300&width=400",
  },
  {
    id: "featured-6",
    title: "JavaScript 비동기 처리: 콜백, Promise, async/await",
    description:
      "JavaScript 비동기 처리를 위한 콜백, Promise, async/await의 차이점을 이해하고 실무에서 효과적으로 사용하는 방법을 알아봅니다.",
    author: "JS 마스터",
    category: "javascript",
    difficulty: "고급",
    tags: ["비동기", "Promise", "async/await"],
    likes: 389,
    publishedAt: "2024-01-12",
    imageUrl: "/placeholder.svg?height=300&width=400",
  },
  {
    id: "featured-7",
    title: "웹 접근성(A11y) 실전 체크리스트 및 가이드",
    description:
      "웹 서비스에 즉시 적용 가능한 웹 접근성 체크리스트와 함께 주요 고려 사항 및 개선 방법을 상세히 안내합니다.",
    author: "A11y 전문가",
    category: "cs",
    difficulty: "중급",
    tags: ["접근성", "A11y", "실전"],
    likes: 277,
    publishedAt: "2024-01-11",
    imageUrl: "/placeholder.svg?height=300&width=400",
  },
];

// export const quizData = [
//   {
//     id: "quiz-1",
//     title: "React Hooks 빈칸 채우기",
//     description: "useState와 useEffect 사용법을 테스트하는 빈칸 채우기 문제입니다.",
//     difficulty: "초급",
//     category: "React",
//     completions: 1234,
//   },
//   {
//     id: "quiz-2",
//     title: "JavaScript 클로저 이해하기",
//     description: "클로저의 개념과 활용법을 테스트하는 코드 완성 문제입니다.",
//     difficulty: "중급",
//     category: "JavaScript",
//     completions: 856,
//   },
//   {
//     id: "quiz-3",
//     title: "Next.js 라우팅 시스템",
//     description: "App Router와 Pages Router의 차이점을 이해하는 문제입니다.",
//     difficulty: "중급",
//     category: "Next.js",
//     completions: 642,
//   },
// ];
